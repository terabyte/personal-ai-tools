#!/usr/bin/env python3

"""
Find Active Epics - Find epics with recent activity for a project
Shows epic tickets with activity in the last 2 weeks
"""

import argparse
import json
import subprocess
import sys
from datetime import datetime, timedelta
from pathlib import Path


def call_jira_api(jira_api_path: Path, endpoint: str) -> dict:
    """Call jira-api script and return parsed JSON response."""
    try:
        cmd = [str(jira_api_path), "GET", endpoint]
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)

        if result.returncode != 0:
            print(f"❌ Jira API call failed: {result.stderr}", file=sys.stderr)
            return {}

        return json.loads(result.stdout)
    except (subprocess.TimeoutExpired, json.JSONDecodeError, Exception) as e:
        print(f"❌ Error calling Jira API: {e}", file=sys.stderr)
        return {}


def find_active_epics(project_key: str, jira_api_path: Path, days: int = 30) -> None:
    """Find and display epics with recent activity."""
    # Calculate date N days ago
    cutoff_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')

    # JQL to find epics with recent activity
    jql = f'project={project_key} AND type=Epic AND updated >= {cutoff_date}'
    jql_encoded = jql.replace(' ', '%20')
    endpoint = f"/search/jql?jql={jql_encoded}&fields=key,summary,updated&maxResults=50"

    response = call_jira_api(jira_api_path, endpoint)
    if not response:
        return

    issues = response.get('issues', [])

    if not issues:
        print(f"No active epics found in {project_key} (last {days} days)")
        return

    print(f"Active epics in {project_key} (updated in last {days} days):")
    print("=" * 50)

    for issue in issues:
        fields = issue.get('fields', {})
        key = issue.get('key', 'N/A')
        summary = fields.get('summary', 'No summary')
        updated = fields.get('updated', '')

        # Calculate days since update
        try:
            if updated.count(':') == 2 and ('+' in updated[-5:] or '-' in updated[-5:]):
                updated = updated[:-2] + ':' + updated[-2:]
            updated_dt = datetime.fromisoformat(updated)
            now = datetime.now(updated_dt.tzinfo)
            days_diff = (now - updated_dt).days

            if days_diff == 0:
                days_text = 'today'
            elif days_diff == 1:
                days_text = '1d ago'
            else:
                days_text = f'{days_diff}d ago'
        except Exception:
            days_text = 'unknown'

        print(f"{key}: {summary} (updated {days_text})")


def main():
    parser = argparse.ArgumentParser(description='Find active epics for a project')
    parser.add_argument('project', help='Jira project key (e.g., CIPLAT, MARVIN)')
    parser.add_argument('-d', '--days', type=int, default=30, help='Number of days to look back (default: 30)')

    args = parser.parse_args()

    # Check if jira-api script exists
    script_dir = Path(__file__).parent
    jira_api = script_dir / "jira-api"

    if not jira_api.exists() or not jira_api.is_file():
        print(f"❌ Error: jira-api script not found at {jira_api}", file=sys.stderr)
        sys.exit(1)

    find_active_epics(args.project, jira_api, args.days)


if __name__ == '__main__':
    main()