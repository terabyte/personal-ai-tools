#!/usr/bin/env bash

# Helper script to find the current active sprint for a project

SELF="$(basename "$0")"
JIRA_API="$(dirname "$0")/jira-api"

function usage {
    cat <<EOF
$SELF: Find the current active sprint for a project

USAGE:
    $SELF PROJECT_KEY

ARGUMENTS:
    PROJECT_KEY    Jira project key (e.g., CIPLAT, MARVIN, ORC)

EXAMPLES:
    $SELF CIPLAT    # Find current CIPLAT sprint
    $SELF MARVIN    # Find current MARVIN sprint

OUTPUTS:
    Sprint name (e.g., "CIPLAT 2025-10-07") or error message

EOF
}

function find_active_sprint {
    local project="$1"

    # Get a recent ticket from the project that has sprint info
    local jql="project=$project AND sprint is not EMPTY"
    local response=$($JIRA_API GET "/search/jql?jql=$(printf '%s' "$jql" | sed 's/ /%20/g')&fields=customfield_10021&maxResults=10" 2>/dev/null)

    if [[ $? -ne 0 ]] || [[ -z "$response" ]]; then
        echo "❌ Failed to query project $project" >&2
        return 1
    fi

    # Parse sprint information to find active sprint
    echo "$response" | python3 -c "
import json, sys
from datetime import datetime
try:
    data = json.load(sys.stdin)
    issues = data.get('issues', [])

    active_sprints = set()
    future_sprints = []
    closed_sprints = []

    for issue in issues:
        fields = issue.get('fields', {})
        sprints = fields.get('customfield_10021', [])

        if sprints:
            for sprint in sprints:
                state = sprint.get('state')
                sprint_name = sprint.get('name', '')

                if not sprint_name:
                    continue

                if state == 'active':
                    active_sprints.add(sprint_name)
                elif state == 'future':
                    start_date = sprint.get('startDate', '')
                    future_sprints.append((sprint_name, start_date))
                elif state == 'closed':
                    end_date = sprint.get('endDate', '')
                    closed_sprints.append((sprint_name, end_date))

    # Priority: active > future > closed
    if active_sprints:
        # If multiple active sprints, pick the first one alphabetically
        print(sorted(active_sprints)[0])
    elif future_sprints:
        # Pick the future sprint with the earliest start date
        future_sprints.sort(key=lambda x: x[1] if x[1] else '')
        print(future_sprints[0][0])
    elif closed_sprints:
        # Pick the most recently closed sprint (latest end date)
        closed_sprints.sort(key=lambda x: x[1] if x[1] else '', reverse=True)
        print(closed_sprints[0][0])
    else:
        print('No sprint found', file=sys.stderr)
        sys.exit(1)

except Exception as e:
    print(f'Error parsing sprint data: {e}', file=sys.stderr)
    sys.exit(1)
"
}

function main {
    if [[ $# -eq 0 ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        usage
        exit 0
    fi

    local project="$1"

    # Check if jira-api script exists
    if [[ ! -x "$JIRA_API" ]]; then
        echo "❌ Error: jira-api script not found at $JIRA_API" >&2
        exit 1
    fi

    find_active_sprint "$project"
}

main "$@"